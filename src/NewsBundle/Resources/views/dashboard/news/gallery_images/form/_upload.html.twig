{% set type = type|default('hidden') %}
{% set class = file_type %}
{% set conteinerId = id|replace({'_': ' '})|title|replace({' ': ''}) %}
{% set conteinerId = conteinerId[:1]|lower ~conteinerId[1:] %}

<div class="form-group form-group-marginless kt-margin-t-20 row">
    {{ form_label(field, label|default(null), {'label_attr': {'class': label_lg~ ' col-form-label'}}) }}
    <div class="{{ div_lg }}">
        {% if field.vars.value is not null %}
            {% set posterJsonDecode = field.vars.value|json_decode %}
            {% if posterJsonDecode['default_file'] is defined %}
                <a rel="nofollow" href="{{ absolute_url(asset(posterJsonDecode['default_file'])) }}" target="_blank">
                    {{ 'ui.image'|trans([], 'DashboardBundle')
                    ~ ' (' ~  'ui.default.default'|trans([], 'DashboardBundle') ~')' }}
                </a>
            {% endif %}
        {% endif %}
        <div class="kt-dropzone dropzone" action="{{ path('upload_bundle_handle_file', {
            'fileSetting': file_type, 'field': name, 'secureToken': secure_token
        }) }}" id="{{ id }}">
            <div class="kt-dropzone__msg dz-message needsclick">
                <h3 class="kt-dropzone__msg-title">
                    {{ 'form.drag_a_file_here_or_click_to_upload'|trans([], 'UploadBundle') }}
                </h3>
                <span class="kt-dropzone__msg-desc">
                   {{ 'form.only_files_are_allowed_for_upload'|trans({'%files_type%': extensions}, 'UploadBundle') }}
                </span>
            </div>
        </div>
        {{ form_widget(field, {'type': type, 'attr': {'class': class, 'value': value, 'param': id}}) }}
    </div>
</div>

<script>
    var dropzoneOptions{{ conteinerId }} = {
        /**
         * The text used before any files are dropped.
         */
        dictDefaultMessage: "Drop files here to upload",

        /**
         * The text that replaces the default message text it the browser is not supported.
         */
        dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",

        /**
         * The text that will be added before the fallback form.
         * If you provide a  fallback element yourself, or if this option is `null` this will
         * be ignored.
         */
        dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",

        {#/**#}
        {#* If the filesize is too big.#}
        {#* `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.#}
        {#*/#}
        {#dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",#}

        /**
         * If the file doesn't match the file type.
         */
        dictInvalidFileType: "You can't upload files of this type.",

        {#/**#}
        {#* If the server response was invalid.#}
        {#* `{{statusCode}}` will be replaced with the servers status code.#}
        {#*/#}
        {#dictResponseError: "Server responded with {{statusCode}} code.",#}

        /**
         * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
         */
        dictCancelUpload: "{{ 'form.cancel_upload'|trans([], 'UploadBundle') }}",

        /**
         * The text that is displayed if an upload was manually canceled
         */
        dictUploadCanceled: "Upload canceled.",

        /**
         * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
         */
        dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",

        /**
         * If `addRemoveLinks` is true, the text to be used to remove a file.
         */
        dictRemoveFile: "{{ 'form.remove_file'|trans([], 'UploadBundle') }}",

        {#/**#}
        {#* Displayed if `maxFiles` is st and exceeded.#}
        {#* The string `{{maxFiles}}` will be replaced by the configuration value.#}
        {#*/#}
        {#dictMaxFilesExceeded: "You can not upload any more files.",#}

        paramName: "file", // The name that will be used to transfer the file
        {% if multi_selection == false %}
        maxFiles: 1,
        {% else %}
        uploadMultiple: true,
        {% endif %}
        maxFilesize: 1024, // MB
        addRemoveLinks: true,
        thumbnailWidth: 120,
        thumbnailHeight: 120,
        thumbnailMethod: 'contain',
        acceptedFiles: "{{ extensions }}",
        previewTemplate: '<div class="dz-preview dz-file-preview"><div class="dz-image"><img data-dz-thumbnail /></div>' +
            '<div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>' +
            '<div class="dz-error-message"><span data-dz-errormessage></span></div><div class="dz-success-mark">' +
            '<svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" ' +
            'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">' +
            '<title>Check</title><defs></defs><g id="Page-1" stroke="none" stroke-width="1" fill="none" ' +
            'fill-rule="evenodd" sketch:type="MSPage"><path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"></path>' +
            '</g></svg></div><div class="dz-error-mark"><svg width="54px" height="54px" viewBox="0 0 54 54" ' +
            'version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' +
            'xmlns:sketch="http://www.bohemiancoding.com/sketch/ns"><title>Error</title><defs></defs>' +
            '<g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">' +
            '<g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" ' +
            'fill="#FFFFFF" fill-opacity="0.816519475"><path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"></path>' +
            '</g></g></svg></div></div>',
        init: function () {
            {% set file = value|json_decode %}
            {% if file is not null and file['admin'] is defined %}
            {% set file = file['admin'] %}
            var thumbUrl = "{{ asset(file) }}";
            var mockFile = {
                name: thumbUrl, size: 5000, isMock: true, serverImgUrl: thumbUrl,
                upload: {serverFileInfo: {'isNew': false}}
            };
            this.files.push(mockFile);
            this.emit('addedfile', mockFile);
            this.emit("thumbnail", mockFile, thumbUrl);
            this.emit('complete', mockFile);
            this.options.maxFiles = this.options.maxFiles - 1;
            {% elseif file is not null and file['default_file'] is defined %}
            {% set file = file['default_file'] %}
            var thumbUrl = "{{ asset(file) }}";
            var mockFile = {
                name: thumbUrl, size: 5000, isMock: true, serverImgUrl: thumbUrl,
                upload: {serverFileInfo: {'isNew': false}}
            };
            this.files.push(mockFile);
            this.emit('addedfile', mockFile);
            this.emit("thumbnail", mockFile, thumbUrl);
            this.emit('complete', mockFile);
            this.options.maxFiles = this.options.maxFiles - 1;
            {% endif %}
        },
        accept: function (file, done) {
            done();
        },
        success: function (file, response) {
            if (response.success == true) {
                $('input[param={{ id }}]').val(JSON.stringify(response.file));
                file.upload.serverFileInfo = {'path': response.path, 'isNew': true};
                file.upload.filename = response.fileName;
                file.name = response.fileName;
            }

            return file.previewElement.classList.add("dz-success");
        },
        removedfile: function removedfile(file) {
            if (file.previewElement != null && file.previewElement.parentNode != null) {
                file.previewElement.parentNode.removeChild(file.previewElement);
            }
            $('input[param={{ id }}]').val(null);
            if (typeof (file.upload.serverFileInfo) !== 'undefined' && typeof (file.upload.serverFileInfo.isNew) !== 'undefined') {
                if (file.upload.serverFileInfo.isNew == true) {
                    $.post("{{ path('upload_bundle_remove_file') }}", file.upload.serverFileInfo, function (data) {
                    });
                }
            }
            return this._updateMaxFilesReachedClass();
        },
        maxfilesexceeded: function (file) {
            this.removeAllFiles();
            this.options.maxFiles = 1;
            this.addFile(file);
        }
    };

    var Dropzone{{ conteinerId }} = new Dropzone('#{{ id }}', dropzoneOptions{{ conteinerId }});
</script>